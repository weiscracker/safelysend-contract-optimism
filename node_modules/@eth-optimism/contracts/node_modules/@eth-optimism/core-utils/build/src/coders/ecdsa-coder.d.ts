/// <reference types="node" />
import { Coder, Signature, Uint16, Uint8, Uint24, Address } from './types';
export declare enum TxType {
    EIP155 = 0,
    EthSign = 1
}
export declare const txTypePlainText: {
    0: TxType;
    1: TxType;
    EIP155: TxType;
    EthSign: TxType;
};
export interface DefaultEcdsaTxData {
    sig: Signature;
    gasLimit: Uint16;
    gasPrice: Uint8;
    nonce: Uint24;
    target: Address;
    data: string;
    type: TxType;
}
export interface EIP155TxData extends DefaultEcdsaTxData {
}
export interface EthSignTxData extends DefaultEcdsaTxData {
}
export declare const TX_TYPE_POSITION: {
    start: number;
    end: number;
};
export declare const SIGNATURE_FIELD_POSITIONS: {
    r: {
        start: number;
        end: number;
    };
    s: {
        start: number;
        end: number;
    };
    v: {
        start: number;
        end: number;
    };
};
export declare const DEFAULT_ECDSA_TX_FIELD_POSITIONS: {
    txType: {
        start: number;
        end: number;
    };
    sig: {
        r: {
            start: number;
            end: number;
        };
        s: {
            start: number;
            end: number;
        };
        v: {
            start: number;
            end: number;
        };
    };
    gasLimit: {
        start: number;
        end: number;
    };
    gasPrice: {
        start: number;
        end: number;
    };
    nonce: {
        start: number;
        end: number;
    };
    target: {
        start: number;
        end: number;
    };
    data: {
        start: number;
    };
};
export declare const EIP155_TX_FIELD_POSITIONS: {
    txType: {
        start: number;
        end: number;
    };
    sig: {
        r: {
            start: number;
            end: number;
        };
        s: {
            start: number;
            end: number;
        };
        v: {
            start: number;
            end: number;
        };
    };
    gasLimit: {
        start: number;
        end: number;
    };
    gasPrice: {
        start: number;
        end: number;
    };
    nonce: {
        start: number;
        end: number;
    };
    target: {
        start: number;
        end: number;
    };
    data: {
        start: number;
    };
};
export declare const ETH_SIGN_TX_FIELD_POSITIONS: {
    txType: {
        start: number;
        end: number;
    };
    sig: {
        r: {
            start: number;
            end: number;
        };
        s: {
            start: number;
            end: number;
        };
        v: {
            start: number;
            end: number;
        };
    };
    gasLimit: {
        start: number;
        end: number;
    };
    gasPrice: {
        start: number;
        end: number;
    };
    nonce: {
        start: number;
        end: number;
    };
    target: {
        start: number;
        end: number;
    };
    data: {
        start: number;
    };
};
export declare const CTC_TX_GAS_PRICE_MULT_FACTOR = 1000000;
declare class DefaultEcdsaTxCoder implements Coder {
    readonly txType: TxType;
    constructor(txType: TxType);
    encode(txData: DefaultEcdsaTxData): string;
    decode(txData: string): DefaultEcdsaTxData;
}
declare class EthSignTxCoder extends DefaultEcdsaTxCoder {
    constructor();
    encode(txData: EthSignTxData): string;
    decode(txData: string): EthSignTxData;
}
declare class Eip155TxCoder extends DefaultEcdsaTxCoder {
    constructor();
    encode(txData: EIP155TxData): string;
    decode(txData: string): EIP155TxData;
}
declare function encode(data: EIP155TxData): string;
declare function decode(data: string | Buffer): EIP155TxData;
export declare const ctcCoder: {
    eip155TxData: Eip155TxCoder;
    ethSignTxData: EthSignTxCoder;
    encode: typeof encode;
    decode: typeof decode;
};
export {};
